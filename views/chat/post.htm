<div class="chat -post">

  <div class="-body">
    <div class="-content" id="chat-content">
      <div></div>
    </div>
    <div class="-input" id="chat-input">
      <form action="" method="post">
	<input type="text"/>
	<button type="submit" class="pretty-button green-button">{t:send}</button>
      </form>
    </div>
  </div>

  <div class="-sidebar">
    <div class="list-box">
      <div>
	<h3>{t:chat.participants} <span class="-count">1</span></h3>
	<ul id="chat-people"></ul>
      </div>
    </div>
    {v:active}
  </div>

</div>

<style type="less">
.chat {

  .-sidebar {
    float: right;
    overflow: hidden;
    width: 230px;
  }
 
  .-body { 
    float: left;
    width: 470px;
    height: 400px;

    .-input {
      border: 1px solid #BBB;
      padding: 2px 0;

      input {
        display: block;
        float: left;
        width: 380px;
        border: none;
        margin: 0;
        height: 27px;
      }
  
      button {
        display: block;
        overflow: hidden;
        margin: auto;
      }
    }

    .-content { 
      position: relative;
      height: 366px;

      > div {
        position: absolute;
        max-height: 366px;
        bottom: 0px;
        width: 100%;
        overflow: auto;
      }
    } 

    .-tirade { 
      padding: 3px 0;
      overflow: hidden;

      &.-odd { background-color: #EEE }

      .-author { 
        width: 100px;
        overflow: hidden;
        float: left;
        padding: 0 3px;
        text-align: right;
        font-weight: bold;
        color: #888;
      }

      line-height: 17px;
      font-size: 12px;
      
      &.-self .-author { color: #E70079 }

      .-line { 
        padding: 0 3px 0 111px;
      }
    }
  } 
}
</style>

<script type="coffeescript" params="self,last,post_url,user_url,chat_url,ensure_url">

$chat = $(".chat")
$people = $("#chat-people")
$content = $("#chat-content")
$input = $("#chat-input")

# KEEPING TRACK OF AVATAR INFORMATION ########################################################

peopleFetch = []
people = {}
people[self.id] = self 

withUser = (usr,callback) -> 
  if people[usr] && people[usr].id
    return callback people[usr]
  if peopleFetch.length == 0
    jog.post user_url, usr, (data) -> 
      if data.user 
        people[data.user.id] = data.user
      myFetch = peopleFetch.reverse() 
      peopleFetch = []
      do f for f in myFetch
  peopleFetch.push () -> 
    withUser usr, callback

# RENDERING PIECES OF TEXT ###################################################################

lastText = null

renderText = (t) ->
  if !lastText || lastText.usr != t.usr 
    $tirade = $("<div class='-tirade'><div class='-author'></div></div>")
    $content.children().append($tirade)
    $tirade.addClass("-odd")  if lastText && lastText.$.is(":not(.-odd)") 
    $tirade.addClass("-self") if t.usr == self.id 
    withUser t.usr, (info) -> 
      $tirade.find(".-author").text(info.name)
    lastText = { $ : $tirade, usr : t.usr } 
  $tirade = lastText.$
  $line = $("<div class='-line'></div>").text(t.txt)
  $tirade.append($line)

# RENDERING LINES OF CONTENT OF ANY KIND #####################################################

seen = {}

render = (list) ->   
  $c = $content.children()
  top = $c.scrollTop()
  if top == $c.scrollTop(9999999999999).scrollTop()
    top = 99999999999999
  list.sort (a,b) -> a.p[1].tim - b.p[1].tim
  $.each list, (i,e) -> 
    return if seen[e.i]
    seen[e.i] = true
    if e.p[0] == "text"
      renderText e.p[1]
  $c.scrollTop(top)

# RENDERING THE LIST OF PARTICIPANTS #########################################################

who = {}

countWho = () ->
  count = $people.children().length
  $people.parent().find(".-count").text(count)

seeWho = (id,enter) -> 
  console.log("%o", arguments)
  if !enter 
    if who[id]
      who[id].$.remove()
    who[id] = false
    do countWho
  else
    return if who[id]
    $box = $("<li></li>").appendTo($people)
    who[id] = { $ : $box }
    do countWho
    withUser id, (info) -> 
      $box.text(info.name).prepend("<img src='"+info.pic+"'/>")

seeWho self.id, true

# REGISTERING COMET LISTENER #################################################################

register = (chat_url) -> 
  Arr.enter chat_url, 
    hear: (what) -> render [what]
    see: seeWho
    error: () -> 
      Arr.exit chat_url
      jog.post ensure_url, "", (data) -> 
        register data.url if data.url

doRegister = () -> 
  register chat_url

setTimeout doRegister, 100

# SUBMITTING THE LINE OF TEXT ################################################################

$input.submit () -> 
  text = $(this).find("input").val() 
  jog.post post_url,text, (res) -> 
    render res.chat if res.chat
  $(this).find("input").val("")
  return false

render last

</script>
